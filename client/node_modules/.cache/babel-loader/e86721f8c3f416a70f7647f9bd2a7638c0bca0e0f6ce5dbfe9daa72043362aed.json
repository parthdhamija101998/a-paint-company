{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\parth\\\\Desktop\\\\a-paint-company\\\\my-client\\\\src\\\\components\\\\paints-list.component.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PaintsList = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Heylo!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n_c = PaintsList;\nexport default PaintsList;\n\n// import { useEffect, useState } from \"react\";\n// import {\n//   Table,\n//   TableHead,\n//   TableRow,\n//   TableCell,\n//   TableBody,\n//   styled,\n//   Button,\n//   Dialog,\n//   DialogTitle,\n//   DialogContentText,\n//   DialogContent,\n//   DialogActions,\n//   TextField,\n//   Typography,\n//   Grid,\n// } from \"@mui/material\";\n\n// import { Link } from \"react-router-dom\";\n\n// import { getProducts, deleteProduct } from \"../service/api\";\n\n// const GridContainer = styled(Grid)({\n//   display: \"flex\",\n//   justifyContent: \"center\",\n//   alignItems: \"center\",\n// });\n\n// const Container = styled(TextField)`\n//   width: 20%;\n//   margin: 10px 20px 0 20px;\n// `;\n\n// const Total = styled(Typography)`\n//   justifycontent: center;\n//   margin: 30px 0 0 20px;\n// `;\n\n// const StyledTable = styled(Table)`\n//   width: 90%;\n//   margin: 30px auto 0 auto;\n// `;\n// const THead = styled(TableRow)`\n//   position: sticky;\n//   top: 0;\n//   z-index: 1;\n//   background-color: black;\n//   & > th {\n//     color: white;\n//     font-size: 15px;\n//   }\n// `;\n// const TBody = styled(TableRow)`\n//   & > td {\n//     font-size: 14px;\n//   }\n// `;\n// let pId = \"\";\n\n// const AllProducts = () => {\n//   const [queryDev, setQueryDev] = useState(\"\");\n//   const [queryScrum, setQueryScrum] = useState(\"\");\n//   const [open, setOpen] = useState(false);\n//   const [products, setProducts] = useState([]);\n\n//   useEffect(() => {\n//     getAllProducts();\n//   }, []);\n\n//   const getAllProducts = async () => {\n//     let response = await getProducts();\n//     setProducts(response.data);\n//   };\n\n//   /**\n//    * @param {*} productId\n//    * @returns Deletes the product\n//    */\n//   const deleteProductId = async (productId) => {\n//     await deleteProduct(productId);\n//     getAllProducts();\n//   };\n\n//   const handleClick = (productId) => {\n//     setOpen(true);\n//     pId = productId;\n//   };\n\n//   const handleConfirm = () => {\n//     deleteProductId(pId);\n//     setOpen(false);\n//   };\n\n//   const handleDevFilterChange = (event) => {\n//     setQueryDev(event.target.value);\n//   };\n\n//   const handleScrumFilterChange = (event) => {\n//     setQueryScrum(event.target.value);\n//   };\n\n//   const filteredProducts = products.filter((product) => {\n//     // Filter by Developer\n//     const devCheck =\n//       queryDev === \"\" ||\n//       product.developers.some((developer) =>\n//         developer.toLowerCase().includes(queryDev.toLowerCase())\n//       );\n\n//     // Filter by SCRUM Master\n//     const scrumCheck =\n//       queryScrum === \"\" ||\n//       product.scrumMasterName.toLowerCase().includes(queryScrum.toLowerCase());\n\n//     // If row passes both filters, return true\n//     const filterCheck = devCheck && scrumCheck;\n\n//     return filterCheck;\n//   });\n\n//   return (\n//     <div>\n//       <GridContainer>\n//         <Container\n//           id=\"searchDeveloper\"\n//           label=\"Search by Developers Name\"\n//           variant=\"standard\"\n//           onChange={(e) => handleDevFilterChange(e)}\n//         />\n//         <Container\n//           id=\"searchScrumMaster\"\n//           label=\"Search by SCRUM Master's Name\"\n//           variant=\"standard\"\n//           onChange={(e) => handleScrumFilterChange(e)}\n//         />\n//         <Total variant=\"h6\">\n//           Products Being Displayed = {filteredProducts.length}\n//         </Total>\n//       </GridContainer>\n//       <StyledTable>\n//         <TableHead>\n//           <THead>\n//             <TableCell>Product ID</TableCell>\n//             <TableCell>Product Name</TableCell>\n//             <TableCell>Product Owner Name</TableCell>\n//             <TableCell>Developers</TableCell>\n//             <TableCell>SCRUM Master Name</TableCell>\n//             <TableCell>Start Date</TableCell>\n//             <TableCell>Methodology</TableCell>\n//             <TableCell></TableCell>\n//           </THead>\n//         </TableHead>\n//         <TableBody>\n//           {filteredProducts.map((product) => (\n//             <TBody key={product.productId}>\n//               <TableCell> {product.productId} </TableCell>\n//               <TableCell> {product.productName} </TableCell>\n//               <TableCell> {product.productOwnerName} </TableCell>\n//               <TableCell>\n//                 {product.developers?.map((developer) => (\n//                   <span key={developer}>\n//                     {developer}\n//                     <br />\n//                   </span>\n//                 ))}\n//               </TableCell>\n//               <TableCell> {product.scrumMasterName} </TableCell>\n//               <TableCell>\n//                 {new Date(product.startDate).toLocaleDateString()}\n//               </TableCell>\n//               <TableCell> {product.methodology} </TableCell>\n//               <TableCell>\n//                 <Button\n//                   variant=\"contained\"\n//                   style={{ marginRight: 10 }}\n//                   component={Link}\n//                   to={`/product/${product.productId}`}\n//                 >\n//                   Edit\n//                 </Button>\n//                 <Button\n//                   variant=\"contained\"\n//                   color=\"secondary\"\n//                   onClick={() => {\n//                     handleClick(product.productId);\n//                   }}\n//                 >\n//                   Delete\n//                 </Button>\n//                 <Dialog open={open} onClose={() => setOpen(false)}>\n//                   <DialogTitle>Delete Item?</DialogTitle>\n//                   <DialogContent>\n//                     <DialogContentText>\n//                       Are you sure you want to delete this item?\n//                     </DialogContentText>\n//                   </DialogContent>\n//                   <DialogActions>\n//                     <Button onClick={() => setOpen(false)} color=\"primary\">\n//                       Cancel\n//                     </Button>\n//                     <Button onClick={handleConfirm} color=\"secondary\" autoFocus>\n//                       Delete\n//                     </Button>\n//                   </DialogActions>\n//                 </Dialog>\n//               </TableCell>\n//             </TBody>\n//           ))}\n//         </TableBody>\n//       </StyledTable>\n//     </div>\n//   );\n// };\n\n// export default AllProducts;\nvar _c;\n$RefreshReg$(_c, \"PaintsList\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","PaintsList","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/parth/Desktop/a-paint-company/my-client/src/components/paints-list.component.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst PaintsList = () => {\r\n  return (\r\n    <div>\r\n      <p>Heylo!</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaintsList;\r\n\r\n// import { useEffect, useState } from \"react\";\r\n// import {\r\n//   Table,\r\n//   TableHead,\r\n//   TableRow,\r\n//   TableCell,\r\n//   TableBody,\r\n//   styled,\r\n//   Button,\r\n//   Dialog,\r\n//   DialogTitle,\r\n//   DialogContentText,\r\n//   DialogContent,\r\n//   DialogActions,\r\n//   TextField,\r\n//   Typography,\r\n//   Grid,\r\n// } from \"@mui/material\";\r\n\r\n// import { Link } from \"react-router-dom\";\r\n\r\n// import { getProducts, deleteProduct } from \"../service/api\";\r\n\r\n// const GridContainer = styled(Grid)({\r\n//   display: \"flex\",\r\n//   justifyContent: \"center\",\r\n//   alignItems: \"center\",\r\n// });\r\n\r\n// const Container = styled(TextField)`\r\n//   width: 20%;\r\n//   margin: 10px 20px 0 20px;\r\n// `;\r\n\r\n// const Total = styled(Typography)`\r\n//   justifycontent: center;\r\n//   margin: 30px 0 0 20px;\r\n// `;\r\n\r\n// const StyledTable = styled(Table)`\r\n//   width: 90%;\r\n//   margin: 30px auto 0 auto;\r\n// `;\r\n// const THead = styled(TableRow)`\r\n//   position: sticky;\r\n//   top: 0;\r\n//   z-index: 1;\r\n//   background-color: black;\r\n//   & > th {\r\n//     color: white;\r\n//     font-size: 15px;\r\n//   }\r\n// `;\r\n// const TBody = styled(TableRow)`\r\n//   & > td {\r\n//     font-size: 14px;\r\n//   }\r\n// `;\r\n// let pId = \"\";\r\n\r\n// const AllProducts = () => {\r\n//   const [queryDev, setQueryDev] = useState(\"\");\r\n//   const [queryScrum, setQueryScrum] = useState(\"\");\r\n//   const [open, setOpen] = useState(false);\r\n//   const [products, setProducts] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     getAllProducts();\r\n//   }, []);\r\n\r\n//   const getAllProducts = async () => {\r\n//     let response = await getProducts();\r\n//     setProducts(response.data);\r\n//   };\r\n\r\n//   /**\r\n//    * @param {*} productId\r\n//    * @returns Deletes the product\r\n//    */\r\n//   const deleteProductId = async (productId) => {\r\n//     await deleteProduct(productId);\r\n//     getAllProducts();\r\n//   };\r\n\r\n//   const handleClick = (productId) => {\r\n//     setOpen(true);\r\n//     pId = productId;\r\n//   };\r\n\r\n//   const handleConfirm = () => {\r\n//     deleteProductId(pId);\r\n//     setOpen(false);\r\n//   };\r\n\r\n//   const handleDevFilterChange = (event) => {\r\n//     setQueryDev(event.target.value);\r\n//   };\r\n\r\n//   const handleScrumFilterChange = (event) => {\r\n//     setQueryScrum(event.target.value);\r\n//   };\r\n\r\n//   const filteredProducts = products.filter((product) => {\r\n//     // Filter by Developer\r\n//     const devCheck =\r\n//       queryDev === \"\" ||\r\n//       product.developers.some((developer) =>\r\n//         developer.toLowerCase().includes(queryDev.toLowerCase())\r\n//       );\r\n\r\n//     // Filter by SCRUM Master\r\n//     const scrumCheck =\r\n//       queryScrum === \"\" ||\r\n//       product.scrumMasterName.toLowerCase().includes(queryScrum.toLowerCase());\r\n\r\n//     // If row passes both filters, return true\r\n//     const filterCheck = devCheck && scrumCheck;\r\n\r\n//     return filterCheck;\r\n//   });\r\n\r\n//   return (\r\n//     <div>\r\n//       <GridContainer>\r\n//         <Container\r\n//           id=\"searchDeveloper\"\r\n//           label=\"Search by Developers Name\"\r\n//           variant=\"standard\"\r\n//           onChange={(e) => handleDevFilterChange(e)}\r\n//         />\r\n//         <Container\r\n//           id=\"searchScrumMaster\"\r\n//           label=\"Search by SCRUM Master's Name\"\r\n//           variant=\"standard\"\r\n//           onChange={(e) => handleScrumFilterChange(e)}\r\n//         />\r\n//         <Total variant=\"h6\">\r\n//           Products Being Displayed = {filteredProducts.length}\r\n//         </Total>\r\n//       </GridContainer>\r\n//       <StyledTable>\r\n//         <TableHead>\r\n//           <THead>\r\n//             <TableCell>Product ID</TableCell>\r\n//             <TableCell>Product Name</TableCell>\r\n//             <TableCell>Product Owner Name</TableCell>\r\n//             <TableCell>Developers</TableCell>\r\n//             <TableCell>SCRUM Master Name</TableCell>\r\n//             <TableCell>Start Date</TableCell>\r\n//             <TableCell>Methodology</TableCell>\r\n//             <TableCell></TableCell>\r\n//           </THead>\r\n//         </TableHead>\r\n//         <TableBody>\r\n//           {filteredProducts.map((product) => (\r\n//             <TBody key={product.productId}>\r\n//               <TableCell> {product.productId} </TableCell>\r\n//               <TableCell> {product.productName} </TableCell>\r\n//               <TableCell> {product.productOwnerName} </TableCell>\r\n//               <TableCell>\r\n//                 {product.developers?.map((developer) => (\r\n//                   <span key={developer}>\r\n//                     {developer}\r\n//                     <br />\r\n//                   </span>\r\n//                 ))}\r\n//               </TableCell>\r\n//               <TableCell> {product.scrumMasterName} </TableCell>\r\n//               <TableCell>\r\n//                 {new Date(product.startDate).toLocaleDateString()}\r\n//               </TableCell>\r\n//               <TableCell> {product.methodology} </TableCell>\r\n//               <TableCell>\r\n//                 <Button\r\n//                   variant=\"contained\"\r\n//                   style={{ marginRight: 10 }}\r\n//                   component={Link}\r\n//                   to={`/product/${product.productId}`}\r\n//                 >\r\n//                   Edit\r\n//                 </Button>\r\n//                 <Button\r\n//                   variant=\"contained\"\r\n//                   color=\"secondary\"\r\n//                   onClick={() => {\r\n//                     handleClick(product.productId);\r\n//                   }}\r\n//                 >\r\n//                   Delete\r\n//                 </Button>\r\n//                 <Dialog open={open} onClose={() => setOpen(false)}>\r\n//                   <DialogTitle>Delete Item?</DialogTitle>\r\n//                   <DialogContent>\r\n//                     <DialogContentText>\r\n//                       Are you sure you want to delete this item?\r\n//                     </DialogContentText>\r\n//                   </DialogContent>\r\n//                   <DialogActions>\r\n//                     <Button onClick={() => setOpen(false)} color=\"primary\">\r\n//                       Cancel\r\n//                     </Button>\r\n//                     <Button onClick={handleConfirm} color=\"secondary\" autoFocus>\r\n//                       Delete\r\n//                     </Button>\r\n//                   </DialogActions>\r\n//                 </Dialog>\r\n//               </TableCell>\r\n//             </TBody>\r\n//           ))}\r\n//         </TableBody>\r\n//       </StyledTable>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AllProducts;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EACvB,oBACED,OAAA;IAAAE,QAAA,eACEF,OAAA;MAAAE,QAAA,EAAG;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEV,CAAC;AAACC,EAAA,GANIN,UAAU;AAQhB,eAAeA,UAAU;;AAEz},"metadata":{},"sourceType":"module","externalDependencies":[]}