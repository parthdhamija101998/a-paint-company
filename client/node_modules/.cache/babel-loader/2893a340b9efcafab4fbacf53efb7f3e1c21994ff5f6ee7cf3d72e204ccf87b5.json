{"ast":null,"code":"import { areDatesEqual, replaceInvalidDateByNull } from './date-utils';\nimport { addPositionPropertiesToSections, createDateStrForInputFromSections, splitFormatIntoSections } from '../hooks/useField/useField.utils';\nexport var singleItemValueManager = {\n  emptyValue: null,\n  getTodayValue: function getTodayValue(utils) {\n    return utils.date();\n  },\n  cleanValue: replaceInvalidDateByNull,\n  areValuesEqual: areDatesEqual,\n  isSameError: function isSameError(a, b) {\n    return a === b;\n  },\n  defaultErrorState: null\n};\nexport var singleItemFieldValueManager = {\n  updateReferenceValue: function updateReferenceValue(utils, value, prevReferenceValue) {\n    return value == null || !utils.isValid(value) ? prevReferenceValue : value;\n  },\n  getSectionsFromValue: function getSectionsFromValue(utils, localeText, prevSections, date, format) {\n    var shouldReUsePrevDateSections = !utils.isValid(date) && !!prevSections;\n    if (shouldReUsePrevDateSections) {\n      return prevSections;\n    }\n    return addPositionPropertiesToSections(splitFormatIntoSections(utils, localeText, format, date));\n  },\n  getValueStrFromSections: function getValueStrFromSections(sections) {\n    return createDateStrForInputFromSections(sections);\n  },\n  getActiveDateSections: function getActiveDateSections(sections) {\n    return sections;\n  },\n  getActiveDateManager: function getActiveDateManager(utils, state) {\n    return {\n      activeDate: state.value,\n      referenceActiveDate: state.referenceValue,\n      getNewValueFromNewActiveDate: function getNewValueFromNewActiveDate(newActiveDate) {\n        return {\n          value: newActiveDate,\n          referenceValue: newActiveDate == null || !utils.isValid(newActiveDate) ? state.referenceValue : newActiveDate\n        };\n      }\n    };\n  },\n  parseValueStr: function parseValueStr(valueStr, referenceValue, parseDate) {\n    return parseDate(valueStr.trim(), referenceValue);\n  },\n  hasError: function hasError(error) {\n    return error != null;\n  }\n};","map":{"version":3,"names":["areDatesEqual","replaceInvalidDateByNull","addPositionPropertiesToSections","createDateStrForInputFromSections","splitFormatIntoSections","singleItemValueManager","emptyValue","getTodayValue","utils","date","cleanValue","areValuesEqual","isSameError","a","b","defaultErrorState","singleItemFieldValueManager","updateReferenceValue","value","prevReferenceValue","isValid","getSectionsFromValue","localeText","prevSections","format","shouldReUsePrevDateSections","getValueStrFromSections","sections","getActiveDateSections","getActiveDateManager","state","activeDate","referenceActiveDate","referenceValue","getNewValueFromNewActiveDate","newActiveDate","parseValueStr","valueStr","parseDate","trim","hasError","error"],"sources":["C:/Users/parth/Documents/PARTH-DHAMIJA-IS24-full-stack-competition-req97073/client/node_modules/@mui/x-date-pickers/internals/utils/valueManagers.js"],"sourcesContent":["import { areDatesEqual, replaceInvalidDateByNull } from './date-utils';\nimport { addPositionPropertiesToSections, createDateStrForInputFromSections, splitFormatIntoSections } from '../hooks/useField/useField.utils';\nexport const singleItemValueManager = {\n  emptyValue: null,\n  getTodayValue: utils => utils.date(),\n  cleanValue: replaceInvalidDateByNull,\n  areValuesEqual: areDatesEqual,\n  isSameError: (a, b) => a === b,\n  defaultErrorState: null\n};\nexport const singleItemFieldValueManager = {\n  updateReferenceValue: (utils, value, prevReferenceValue) => value == null || !utils.isValid(value) ? prevReferenceValue : value,\n  getSectionsFromValue: (utils, localeText, prevSections, date, format) => {\n    const shouldReUsePrevDateSections = !utils.isValid(date) && !!prevSections;\n    if (shouldReUsePrevDateSections) {\n      return prevSections;\n    }\n    return addPositionPropertiesToSections(splitFormatIntoSections(utils, localeText, format, date));\n  },\n  getValueStrFromSections: sections => createDateStrForInputFromSections(sections),\n  getActiveDateSections: sections => sections,\n  getActiveDateManager: (utils, state) => ({\n    activeDate: state.value,\n    referenceActiveDate: state.referenceValue,\n    getNewValueFromNewActiveDate: newActiveDate => ({\n      value: newActiveDate,\n      referenceValue: newActiveDate == null || !utils.isValid(newActiveDate) ? state.referenceValue : newActiveDate\n    })\n  }),\n  parseValueStr: (valueStr, referenceValue, parseDate) => parseDate(valueStr.trim(), referenceValue),\n  hasError: error => error != null\n};"],"mappings":"AAAA,SAASA,aAAa,EAAEC,wBAAwB,QAAQ,cAAc;AACtE,SAASC,+BAA+B,EAAEC,iCAAiC,EAAEC,uBAAuB,QAAQ,kCAAkC;AAC9I,OAAO,IAAMC,sBAAsB,GAAG;EACpCC,UAAU,EAAE,IAAI;EAChBC,aAAa,EAAE,SAAAA,cAAAC,KAAK;IAAA,OAAIA,KAAK,CAACC,IAAI,EAAE;EAAA;EACpCC,UAAU,EAAET,wBAAwB;EACpCU,cAAc,EAAEX,aAAa;EAC7BY,WAAW,EAAE,SAAAA,YAACC,CAAC,EAAEC,CAAC;IAAA,OAAKD,CAAC,KAAKC,CAAC;EAAA;EAC9BC,iBAAiB,EAAE;AACrB,CAAC;AACD,OAAO,IAAMC,2BAA2B,GAAG;EACzCC,oBAAoB,EAAE,SAAAA,qBAACT,KAAK,EAAEU,KAAK,EAAEC,kBAAkB;IAAA,OAAKD,KAAK,IAAI,IAAI,IAAI,CAACV,KAAK,CAACY,OAAO,CAACF,KAAK,CAAC,GAAGC,kBAAkB,GAAGD,KAAK;EAAA;EAC/HG,oBAAoB,EAAE,SAAAA,qBAACb,KAAK,EAAEc,UAAU,EAAEC,YAAY,EAAEd,IAAI,EAAEe,MAAM,EAAK;IACvE,IAAMC,2BAA2B,GAAG,CAACjB,KAAK,CAACY,OAAO,CAACX,IAAI,CAAC,IAAI,CAAC,CAACc,YAAY;IAC1E,IAAIE,2BAA2B,EAAE;MAC/B,OAAOF,YAAY;IACrB;IACA,OAAOrB,+BAA+B,CAACE,uBAAuB,CAACI,KAAK,EAAEc,UAAU,EAAEE,MAAM,EAAEf,IAAI,CAAC,CAAC;EAClG,CAAC;EACDiB,uBAAuB,EAAE,SAAAA,wBAAAC,QAAQ;IAAA,OAAIxB,iCAAiC,CAACwB,QAAQ,CAAC;EAAA;EAChFC,qBAAqB,EAAE,SAAAA,sBAAAD,QAAQ;IAAA,OAAIA,QAAQ;EAAA;EAC3CE,oBAAoB,EAAE,SAAAA,qBAACrB,KAAK,EAAEsB,KAAK;IAAA,OAAM;MACvCC,UAAU,EAAED,KAAK,CAACZ,KAAK;MACvBc,mBAAmB,EAAEF,KAAK,CAACG,cAAc;MACzCC,4BAA4B,EAAE,SAAAA,6BAAAC,aAAa;QAAA,OAAK;UAC9CjB,KAAK,EAAEiB,aAAa;UACpBF,cAAc,EAAEE,aAAa,IAAI,IAAI,IAAI,CAAC3B,KAAK,CAACY,OAAO,CAACe,aAAa,CAAC,GAAGL,KAAK,CAACG,cAAc,GAAGE;QAClG,CAAC;MAAA;IACH,CAAC;EAAA,CAAC;EACFC,aAAa,EAAE,SAAAA,cAACC,QAAQ,EAAEJ,cAAc,EAAEK,SAAS;IAAA,OAAKA,SAAS,CAACD,QAAQ,CAACE,IAAI,EAAE,EAAEN,cAAc,CAAC;EAAA;EAClGO,QAAQ,EAAE,SAAAA,SAAAC,KAAK;IAAA,OAAIA,KAAK,IAAI,IAAI;EAAA;AAClC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}